------------------ Service GetMessages -----------------------------------------

Le service GetMessages attend les param√®tres suivants:
      - key: cl√© de session
      - query: les mots cl√© de la recherche (vide si ne pas de filtre par mot-cl√©)
      - from: l'identifiant de l'utilisateur duquel on souhaite voir les messages associ√©s (les siens et ceux des personnes qu'il suit). -1 si on est sur la page principale et que l'on souhaite avoir les messages de tout le monde
      - id_max: l'identifiant de chaque message retourn√© doit √™tre inf√©rieur √† id_max (-1 si  pas de limite)
      - id_min: l'identifiant de chaque message retourn√© doit √™tre sup√©rieur √† id_min (-1 si  pas de limite)
      - nb: nombre de messages √† retourner (-1 si pas de limite)

L'objectif de id_max est de permettre un chargement progressif des messages. Au chargement initial, on r√©cup√®re les messages 10 par 10 tant que l'on ne d√©passe pas de la page. Ensuite, lorsque le dernier message appara√Æt par d√©filement vertical de l'utilisateur, on charge les messages suivants 10 par 10 tant que l'on ne d√©passe pas de la page. On appelle √† chaque nouveau chargement le service search avec id_max=l'identifiant maximal parmi les messages d√©j√† r√©cup√©r√©s (en supposant que les identifiants soient attribu√©s dans l'ordre et que donc un plus grand identifiant refl√®te d'un message plus r√©cent).

L'objectif  de id_min est de permettre un rechargement du d√©but de la liste affich√©e, si des nouveaux messages ont √©t√© publi√©s depuis le dernier affichage. Cela est utile lorsque l'on recharge la page ou lorsque l'on publie un nouveau message.


Le service GetMessages retourne (sous forme de cha√Æne de caract√®res - text/plain) une liste de messages resultats ordonn√©e du plus au moins pertinent (ou r√©cent si pas de filtre par mot-cl√©).
Chaque message resultat est alors un objet tel que:

{"id":i, "auteur":a, "texte":t, "date":d, "comments":c}

Avec
      - i: l'identifiant du message
      - a: l'auteur du message
      - t: le texte du message
      - d: la date du message
      - c: la liste des commentaires associ√©s au message

Chaque commentaire d'un message est un objet tel que:

{"id":i, "auteur":a, "texte":t, "date":d}

Avec
      - i: l'identifiant du commentaire
      - a: l'auteur du commentaire
      - t: le texte du commentaire
      - d: la date du commentaire

Chaque auteur est un objet:

{"id":i,"login":l}

Avec
       - i: l'identifiant de l'utilisateur
       - l: le login de l'utilisateur

-----------------------------------------


Verifier la taille de TOUS les inputs
Verifier comment verifier la taille de l'input anniversaire
Modifier les tailles des variables stockees dans MySQL
Verifier qu'un utilisateur ne peut pas liker deux fois le meme commentaire
La fonction retournant le temps d'inactivite d'un utilisateur ne fonctionne pas de midi a 13h, ensuite elle refonctionne
Tester SupprimerLike avec un utilisateur n'ayant pas like
Service ListerMessages
Implementer la verification de la validite de la date d'anniversaire
Faire un schema de la BDD MongoDB
Faire un schema de la BDD MySQL
On ne supprime pas les messages ou les commentaires lors de la suppression d'un utilisateur, le preciser lors de l'ecriture du CDG
Quand on aura tout fini, rajouter pour chaque service un catch (Exception e) avec un JSON D'erreur : ERREUR_INCONNUE
Ajouter un petit message ou un petit design de site diffÈrent lorsque c'est l'anniversaire d'un utilisateur
